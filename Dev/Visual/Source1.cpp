  #include <cstdio> #include <cmath> #include <SFML/Graphics.hpp> #include <SFML/Window.hpp> #include "Engines.hpp" #include "ClassCat.hpp" #include <locale.h>  struct ActKey {  };  unsigned int width = 640; unsigned int height = 640 * 9 / 16;  sf::RenderWindow window; ve::VisualEngine VE; pe::PhysicEngine PE;  int main () { #define TEXTURE_FILE_CAT "sprites/cat.png"  	window.create (sf::VideoMode (width, height, 8 * 8), "TestActKey", sf::Style::Titlebar & 																	   sf::Style::Close); 	window.setPosition (sf::Vector2i (1920 / 2 + width /2, 0)); 	window.setVerticalSyncEnabled (true); 	window.setKeyRepeatEnabled (false);  	VE.init (20);  	sf::Texture texture_cat; 	if (!texture_cat.loadFromFile (TEXTURE_FILE_CAT)) 		printf ("Failed to load texture");  	hero::cat cat ({ 150, 400 }, &texture_cat); 	hero::cat cat2 ({ 150, 400 }, &texture_cat);  	VE.add ((ve::Visobj *) &(cat.View)); 	VE.add ((ve::Visobj *) & (cat2.View));  	bool state = true, state2 = true; 	sf::Event event; 	while (window.isOpen ()) { 		while (window.pollEvent (event)) { 			if (event.type == sf::Event::Closed) 				window.close (); 			else if (event.KeyReleased){ 				 				switch (event.key.code) {  				case sf::Keyboard::Space: 					if (state) { 						VE.visOff (cat.View.BufNum); 						state = false; 					} else { 						VE.visOn (cat.View.BufNum); 						state = true; 					} 					VE.DUMP (); 					break;  				case sf::Keyboard::LShift: 					if (state2) { 						VE.visOff (cat2.View.BufNum); 						state2 = false; 					} else { 						VE.visOn (cat2.View.BufNum); 						state2 = true; 					} 					VE.DUMP (); 					break; 				} 			} 		}  		window.clear (sf::Color::White); 		VE.draw (); 		//printf ("Size: %d, SizeOn %d, posOff: %d\n", VE.size, VE.sizeOn, VE.posOff); 		//printf ("BufNumber: %d\n", cat.View.BufNum); 		window.display (); 	}  	return 0;  #undef TEXTURE_FILE_CAT } 